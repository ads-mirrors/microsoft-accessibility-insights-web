// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FailureInstancePanelControlTest closeFailureInstancePanel: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest closeFailureInstancePanel: FlaggedComponent props 1`] = `
{
  "enableJSXElement": <FailureInstancePanelDetails
    onSelectorChange={[Function]}
    onValidateSelector={[Function]}
    path={null}
    snippet={null}
  />,
  "featureFlag": "manualInstanceDetails",
  "featureFlagStoreData": {},
}
`;

exports[`FailureInstancePanelControlTest componentDidUpdate reassigns state: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest componentDidUpdate reassigns state: FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onAddFailureInstance: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest onAddFailureInstance: FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onFailureDescriptionChange: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest onFailureDescriptionChange: FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onSaveEditedFailureInstance: Button props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onSaveEditedFailureInstance: FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onSelectorChange : Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest onSelectorChange : FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest onValidateSelector : Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest onValidateSelector : FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest openFailureInstancePanel: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest openFailureInstancePanel: FlaggedComponent props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: create without instance 1`] = `
<DocumentFragment>
  <mock-button
    appearance="transparent"
    aria-description="Open add a failure instance panel"
    aria-label="Add a failure instance"
    icon="[object Object]"
  >
    Add a failure instance
  </mock-button>
  <mock-genericpanel
    classname="failureInstancePanel"
    closebuttonarialabel="Close failure instance panel"
    hasclosebutton="true"
    headertext="Add a failure instance"
    isopen="false"
  >
    <mock-flaggedcomponent
      enablejsxelement="[object Object]"
      featureflag="manualInstanceDetails"
      featureflagstoredata="[object Object]"
    />
    <mock-styledtextfieldbase
      classname="observedFailureTextfield"
      label="Comment"
      multiline="true"
      placeholder="Comment"
      resizable="false"
      rows="8"
      value=""
    />
    <div>
      <mock-actionandcancelbuttonscomponent
        ishidden="false"
        primarybuttondisabled="true"
        primarybuttontext="Add failed instance"
      />
    </div>
  </mock-genericpanel>
</DocumentFragment>
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: create without instance: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: create without instance: FlaggedComponent props 1`] = `
{
  "enableJSXElement": <FailureInstancePanelDetails
    onSelectorChange={[Function]}
    onValidateSelector={[Function]}
    path={null}
    snippet={null}
  />,
  "featureFlag": "manualInstanceDetails",
  "featureFlagStoreData": {},
}
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: edit without instance 1`] = `
<DocumentFragment>
  <mock-link
    classname="editButton"
  />
  <mock-genericpanel
    classname="failureInstancePanel"
    closebuttonarialabel="Close failure instance panel"
    hasclosebutton="true"
    headertext="Edit failure instance"
    isopen="false"
  >
    <mock-flaggedcomponent
      enablejsxelement="[object Object]"
      featureflag="manualInstanceDetails"
      featureflagstoredata="[object Object]"
    />
    <mock-styledtextfieldbase
      classname="observedFailureTextfield"
      label="Comment"
      multiline="true"
      placeholder="Comment"
      resizable="false"
      rows="8"
      value=""
    />
    <div>
      <mock-actionandcancelbuttonscomponent
        ishidden="false"
        primarybuttondisabled="true"
        primarybuttontext="Save"
      />
    </div>
  </mock-genericpanel>
</DocumentFragment>
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: edit without instance: Button props 1`] = `undefined`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: edit without instance: FlaggedComponent props 1`] = `
{
  "enableJSXElement": <FailureInstancePanelDetails
    onSelectorChange={[Function]}
    onValidateSelector={[Function]}
    path={null}
    snippet={null}
  />,
  "featureFlag": "manualInstanceDetails",
  "featureFlagStoreData": {},
}
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: partial original instance 1`] = `
<DocumentFragment>
  <mock-button
    appearance="transparent"
    aria-description="Open add a failure instance panel"
    aria-label="Add a failure instance"
    icon="[object Object]"
  >
    Add a failure instance
  </mock-button>
  <mock-genericpanel
    classname="failureInstancePanel"
    closebuttonarialabel="Close failure instance panel"
    hasclosebutton="true"
    headertext="Add a failure instance"
    isopen="false"
  >
    <mock-flaggedcomponent
      enablejsxelement="[object Object]"
      featureflag="manualInstanceDetails"
    />
    <mock-styledtextfieldbase
      classname="observedFailureTextfield"
      label="Comment"
      multiline="true"
      placeholder="Comment"
      resizable="false"
      rows="8"
      value="original text"
    />
    <div>
      <mock-actionandcancelbuttonscomponent
        ishidden="false"
        primarybuttondisabled="false"
        primarybuttontext="Add failed instance"
      />
    </div>
  </mock-genericpanel>
</DocumentFragment>
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: partial original instance: Button props 1`] = `
{
  "appearance": "transparent",
  "aria-description": "Open add a failure instance panel",
  "aria-label": "Add a failure instance",
  "children": "Add a failure instance",
  "icon": <FluentUIV9Icon
    iconName="AddRegular"
  />,
  "onClick": [Function],
}
`;

exports[`FailureInstancePanelControlTest render FailureInstancePanelControl: partial original instance: FlaggedComponent props 1`] = `
{
  "enableJSXElement": <FailureInstancePanelDetails
    onSelectorChange={[Function]}
    onValidateSelector={[Function]}
  />,
  "featureFlag": "manualInstanceDetails",
  "featureFlagStoreData": null,
}
`;
